// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: 'dependencies.gradle'
apply plugin: 'jacoco'

buildscript {

    ext.jacocoVersion = '0.8.7'

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30"
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.38.1'
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5'
        //classpath "org.jacoco:org.jacoco.core:$jacocoVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
subprojects {
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if ('org.jacoco' == details.requested.group) {
                    details.useVersion jacocoVersion
                }
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport, dependsOn: ['app:connectedAndroidTest', 'domain:jacocoTestReport']) {
    reports {
        xml.enabled true
        html.enabled true
    }

    def appModuleExclusions = [
            "**/R*.class",
            "**/BuildConfig.*",
            "**/Manifest"
    ]

    def appProject = project(':app')

    def appSourceDirectories = layout.files("$appProject.projectDir/src/main/java")
    def appClassDirectories = fileTree(dir: "$appProject.buildDir/tmp/kotlin-classes/debug", excludes: appModuleExclusions)
    def appExecutionData = fileTree(
            dir: "$appProject.buildDir/outputs/code_coverage/debugAndroidTest/connected",
            include: '*coverage.ec').visit {
        FileVisitDetails details -> details.file.name
    }

    sourceDirectories.setFrom(files([appSourceDirectories,
                               tasks.getByPath("domain:jacocoTestReport").sourceDirectories]))

    classDirectories.setFrom(files([appClassDirectories.asPath,
                              tasks.getByPath("domain:jacocoTestReport").classDirectories]))

    executionData.setFrom(files([appExecutionData,
                           tasks.getByPath("domain:jacocoTestReport").executionData]))

}